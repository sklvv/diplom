import { useState } from "react";

export default function FaceIDUnlockDemo() {
	const [unlocked, setUnlocked] = useState(false);
	const [error, setError] = useState("");

	async function requestBiometricUnlock() {
		setError("");
		try {
			const publicKeyCredentialRequestOptions: PublicKeyCredentialRequestOptions =
				{
					challenge: Uint8Array.from("test-challenge", c => c.charCodeAt(0)),
					timeout: 60000,
					userVerification: "required",
				};

			const credential = await navigator.credentials.get({
				publicKey: publicKeyCredentialRequestOptions,
			});

			if (credential) {
				setUnlocked(true);
			} else {
				setError("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
			}
		} catch (err) {
			console.error(err);
			if (err instanceof Error) {
				setError("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + err.message);
			} else {
				setError("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
			}
		}
	}

	return (
		<div style={{ padding: 20 }}>
			<h2>Face ID / Touch ID –î–µ–º–æ</h2>
			{!unlocked ? (
				<>
					<button onClick={requestBiometricUnlock}>üîê –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</button>
					{error && <p style={{ color: "red" }}>{error}</p>}
				</>
			) : (
				<div style={{ marginTop: 20 }}>
					<h3>‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω</h3>
					<p>
						–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç: <strong>42 ‚Äî —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å—ë.</strong>
					</p>
				</div>
			)}
		</div>
	);
}
